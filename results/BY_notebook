Lab Notebook - Brendan Yu (950428T057)
KTH | DD2404 Applied Bioinformatics
Project Name: Reducing noise in multialignments
Project Date: 18/12/2015

DATE: 18/12/2015

ENTRY: This is the first entry marking the beginning of work on this bioinformatics project. After a brief discussion, we decided to choose the noise-reduction topic which was good because it is relevant to my interests in genetics. We decided to all work on the code together but individually (changes made on our personal computers will be uploaded to GitHub for group reviewal). The project method was divided into three sections. 1) Writing the code for reducing noise in the given alignments, 2) Creating inferred trees for the given alignments + noise-reduced alignments, and 3) Calculating the distance between inferred and reference trees. The final results will provide evidence supporting/not supporting the hypothesis that noise-reduction increases analysis effectiveness/efficiency. I made some initial plans for the noise-reduction code in the 'align.py' file. Basically, it uses BioPython's AlignIO to parse the alignments and iterate through each individual column. In order to check for noise, each element (amino acid) from the column must be read as a string which is done using nested for loops. The first condition was easily coded in, using the count method to count the number of indels (-) and set an if statement for greater than 50% indels. However the next condition is more difficult, I am not familiar with finding unique elements in sets and will have to look for help.

DATE: 19/12/2015

ENTRY: After consultation with Lara and Dennis, I adjusted the code in order to account for the unique amino acid condition for noise consideration. From the Python package 'Collections' there is a counter method which can be used to count the number of appearances each amino acid makes in the column. The program searches for amino acids that only appear once, and saves the index to the list of 'noisy' columns. Noisy is reduced to a set in order to account for noisy columns that appear twice in the list due to them fulfilling more than one criteria.

DATE: 2/01/2016

ENTRY: A number of key changes was made to the alignment code today after discussion of potential misunderstandings. It was realised that the conditions for noise consideration were misinterpreted. If there were at least 50% unique amino acids means that the number of amino acids that appear only once contribute to 50% of the total amino acids in the column. The initial method of grouping all different amino acids together using the set() function of Python however this would only group each amino acid (AA) into a unique set, and not give the number of AAs that are unique. This was corrected by using the counter method from the Collections package, iterating through each AA and finding those that only appear once.

DATE: 4/01/2016

ENTRY: We have successfully ran the noise reduction program and produced noise-reduced alignments for each dataset (6 directories in total). Upon inspection of the alignments using a text editor, it could be seen that noise was removed according to the given conditions. Furthermore, the alignments were checked using an online MUSCLE tool (http://www.ebi.ac.uk/Tools/msa/muscle/) to compare the two coupled alignment with each other (HTML output). No noticeable errors were found in the alignments however further inspection will be required in the next few days. The next step is to run each alignment through the FastPhylo package (fastdist & fnj) to produce inferred trees, but currently we are having difficulty with installing the package (command not found: error). We have advised Lars and hope to receive an answer shortly.

DATE: 5/01/2016

ENTRY: Following some initial difficulties with using the FastPhylo package, it was advised by Lars to use the FastTree program to infer trees from the alignments. We have successfully created inferred trees using FastTree (.tree files) and then with the use of DendroPy and a short script, calculated the relevant statistics to determine the effectiveness of noise reduction. It was decided that the Robinson-Foulds distance (i.e. symmetric distance) would be used as the primary metric as it provides a simple way of viewing the similarities to the reference tree (with 0 being 'identical' in this case). 

DATE: 6/01/2016

ENTRY: Work begins on preparing the final report for the project. After analysing the results, we have come to the agreement that reducing noise in this case is not effective in achieving higher recovery rates for the inferred trees. Further modification of the program would be required to produce more significant results such as implementing a variable stringency setting for removing noise or contextual noise removal based on surrounding columns.

DATE: 8/01/2016

ENTRY: A couple of errors were discovered in the code which may have a slight impact on the results. It was found that some columns were not removed for Condition 3 after new controls were made. This was quickly fixed (if twice is none: -> if not twice:). Also it was found the some columns were not printed out in the correct order that they originally were in. This was also fixed by using the sorted() method on the noisy list. New alignments, trees, and RF distances were added and it was found that the results were not significantly affected. Relevant changes were made to the report.

DATE: 9/01/2016

ENTRY: The report is in the process of being finalised and the group is satisfied with the layout. Overall, Stafford Nobleâ€™s ideas were followed whenever possible which a few adjustments for convenience. It was agreed from the beginning that documentation of the project should be detailed enough for another student or researcher to replicate the experiment and achieve similar, if not identical, results to what we observed. The file and directory organization was followed closely, using data, src, and results directories for top level organisation followed by chronological organisation. This made it much easier when we had to look back on previous results after finding errors in the code. Lab notebooks were also maintained in order to track the progress of the project as well as access any problems that may have occurred during the project. A balance of command lines, scripts, and programs was used to find results in the most efficient manner, without convolution. The main script was used to read alignments and remove noise and after bash commands were used to run the script for every alignment. 
